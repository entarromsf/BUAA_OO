package top.buaaoo.main;

import static org.junit.Assert.*;

import org.junit.Test;

public class Controler_incidentallyTest {
	@Test
	public void testSchedule() {
		double[] Time = {0.0,3.0,4.0,6.0,9.0,13.0,13.0,13.0,14.0,16.0,19.0,20.0,25.0,26.0,26.0,28.0,28.0,29.0,30.0,32.0,32.0,36.0,40.0,41.0,41.0,41.0,43.0,43.0,44.0,45.0,46.0,47.0,47.0,47.0,49.0,49.0,50.0,52.0,53.0,55.0,55.0,56.0,59.0,62.0,64.0,64.0,67.0,69.0,69.0,71.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
		int[] Floor = {1,5,2,1,2,10,4,6,5,8,7,6,1,6,3,6,6,10,7,3,9,3,1,9,8,1,9,7,1,2,5,2,9,8,2,10,10,3,2,10,1,9,1,1,9,4,3,3,10,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		int[] Method = {2,3,3,3,2,1,3,1,3,1,2,2,3,1,3,3,1,1,1,2,3,2,2,3,3,3,1,3,2,1,3,2,1,2,1,1,3,3,3,1,3,1,3,2,2,2,3,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		int Num = 50;
		Controler_incidentally c = new Controler_incidentally();
		Floor floor = new Floor();
		Elevator elevator = new Elevator();
		Input input = new Input();
		input.setFloor(Floor);
		input.setTime(Time);
		input.setMethod(Method);
		input.setNum(Num);
		c.schedule(input, floor, elevator);
		assertEquals(50, c.prn);
		//bug修复，处理了时间的显示。
		double[] Time1 = {0.0,4294967295.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
		int[] Floor1 = {1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		int[] Method1 = {2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		int Num1 = 2;
		Controler_incidentally c1 = new Controler_incidentally();
		Floor floor1 = new Floor();
		Elevator elevator1 = new Elevator();
		Input input1 = new Input();
		input1.setFloor(Floor1);
		input1.setTime(Time1);
		input1.setMethod(Method1);
		input1.setNum(Num1);
		c1.schedule(input1, floor1, elevator1);
		
		double[] Time2 = {0.0,1.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
		int[] Floor2 = {1,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		int[] Method2 = {2,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		int Num2 = 4;
		Controler_incidentally c2 = new Controler_incidentally();
		Floor floor2 = new Floor();
		Elevator elevator2 = new Elevator();
		Input input2 = new Input();
		input2.setFloor(Floor2);
		input2.setTime(Time2);
		input2.setMethod(Method2);
		input2.setNum(Num2);
		c1.schedule(input2, floor2, elevator2);
		
		double[] Time3 = {0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,6.0,6.0,6.0,6.0,7.0,7.0,7.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
		int[] Floor3 = {1,10,2,3,4,5,2,3,4,5,1,4,3,2,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		int[] Method3 = {2,3,2,2,2,2,3,3,3,3,2,2,2,2,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		int Num3 = 17;
		Controler_incidentally c3 = new Controler_incidentally();
		Floor floor3 = new Floor();
		Elevator elevator3 = new Elevator();
		Input input3 = new Input();
		input3.setFloor(Floor3);
		input3.setTime(Time3);
		input3.setMethod(Method3);
		input3.setNum(Num3);
		c3.schedule(input3, floor3, elevator3);
		
		double[] Time4 = {0.0,0.0,8.0,16.0,24.0,30.0,36.0,44.0,52.0,60.0,60.0,66.0,68.0,68.0,74.0,78.0,84.0,88.0,92.0,96.0,100.0,106.0,110.0,112.0,116.0,116.0,124.0,128.0,130.0,136.0,144.0,152.0,154.0,156.0,158.0,166.0,172.0,174.0,176.0,182.0,186.0,188.0,190.0,196.0,204.0,206.0,206.0,214.0,214.0,218.0,224.0,224.0,224.0,228.0,234.0,242.0,248.0,256.0,264.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
		int[] Floor4 = {1,10,3,7,7,2,8,9,6,2,5,2,3,7,2,1,5,5,5,2,5,4,3,3,8,8,6,4,1,8,9,6,5,4,5,7,1,7,9,3,8,8,2,7,8,4,2,7,5,5,8,6,3,8,6,6,8,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		int[] Method4 = {2,3,2,3,1,1,2,1,1,3,2,3,3,3,2,3,3,1,2,3,3,3,2,3,2,2,3,2,3,1,3,1,3,3,3,1,2,2,1,2,3,3,3,2,1,1,1,2,3,3,3,2,1,2,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		int Num4 = 59;
		Controler_incidentally c4 = new Controler_incidentally();
		Floor floor4 = new Floor();
		Elevator elevator4 = new Elevator();
		Input input4 = new Input();
		input4.setFloor(Floor4);
		input4.setTime(Time4);
		input4.setMethod(Method4);
		input4.setNum(Num4);
		c4.schedule(input4, floor4, elevator4);
	}

	@Test
	public void testFindMin() {
		Controler_incidentally c = new Controler_incidentally();
		int[] A = {5,1,2,3,7,5,5,5,9,7,200};
		assertEquals(1, c.FindMin(A, 0));
	}

	@Test
	public void testThreemin() {
		Controler_incidentally c = new Controler_incidentally();
		assertEquals(1, c.Threemin(1, 2, 3));
		assertEquals(1, c.Threemin(2, 1, 3));
		assertEquals(1, c.Threemin(3, 2, 1));
		assertEquals(200, c.Threemin(200, 200, 200));
	}

	@Test
	public void testFindEleBuUP() {
		Controler_incidentally c = new Controler_incidentally();
		c.setRunTime(5);
		int[] bu = {5,1,2,3,7,5,5,5,9,7,1};
		double[] t = {5,1,2,3,7,5,5,5,9,7,1};
		assertEquals(1, c.FindEleBuUP(bu, t, 1));
		
		Controler_incidentally c1 = new Controler_incidentally();
		c.setRunTime(5);
		int[] bu1 = {200,200,200,200,200,200,200,200,200,200,200};
		double[] t1 =new double[1000];
		for(int i = 0;i < 1000; i++) {
			t1[i] = 200;
		}
	}

	@Test
	public void testFindEleBuDOWN() {
		Controler_incidentally c = new Controler_incidentally();
		c.setRunTime(500);
		int[] bu = {5,1,2,3,7,5,5,5,9,7,1};
		double[] t = {5,1,2,3,7,5,5,5,9,7,1};
		assertEquals(10, c.FindEleBuUP(bu, t, 10));
		
		Controler_incidentally c1 = new Controler_incidentally();
		c.setRunTime(500);
		int[] bu1 = {200,200,200,200,200,200,200,200,200,200,200};
		double[] t1 =new double[1000];
		for(int i = 0;i < 1000; i++) {
			t1[i] = 200;
		}
		
	}

	@Test
	public void testFindnextTime() {
		Controler_incidentally c = new Controler_incidentally();
		c.setRunTime(8);
		double[] t = {5,1,2,3,7,5,5,5,9,7,1};
		c.FindnextTime(t, 10);
	}
	
	@Test
	public void testRepOk(){
		Controler_incidentally c = new Controler_incidentally();
		assertEquals(true, c.repOK());
	}

}
